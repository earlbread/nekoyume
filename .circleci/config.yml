# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

references:
  install_dependencies: &install_dependencies
    run:
      name: install dependencies
      command: |
        sudo apt-get install libgmp3-dev
        python3 -m venv venv
        . venv/bin/activate
        pip install -U setuptools
        pip install -r requirements.txt
        pip install -e .[test,dev]
  docker: &docker
    docker:
      - image: circleci/python:3.6.4
  restore_cache: &restore_cache
    restore_cache:
      keys:
        - v2-dependencies-{{ checksum "requirements.txt" }}
        # fallback to using the latest cache if no exact match is found
        - v2-dependencies-

jobs:
  build:
    <<: *docker

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - *restore_cache

      - *install_dependencies

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            coverage run -m pytest
            codecov --token=382fccb2-35b2-4861-ba06-56db19f2c36d

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker

      - run:
          name: Run Docker Compose
          command: |
            cp .env.dist .env
            docker-compose build
            docker-compose up -d
            docker-compose down

      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy:
    <<: *docker

    steps:
      - checkout
      - run:
          name: Install wheel
          command: |
            pip install wheel
      - run:
          name: Setup pypirc
          command: |
            # Configure pypirc
            echo '[server-login]'                                       >> ~/.pypirc;
            echo "username: $PYPI_USERNAME"                             >> ~/.pypirc;
            echo "password: $PYPI_PASSWORD"                             >> ~/.pypirc;
      - *install_dependencies
      - run:
          name: Upload
          command: |
            python3 setup.py sdist bdist_wheel upload

  dev-deploy:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install awscli
          command: pip install awscli
      - run:
          name: Download gcloud key
          command: aws s3 cp s3://gcloud-key/gcloud-service-key.json ${HOME}
      - run: |
          gcloud --quiet auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Build & Upload docker image
          command: gcloud --quiet builds submit --config=config.yaml --substitutions=_COMMIT_HASH=${CIRCLE_SHA1}
      - run:
          name: Replace args
          command: |
            sed -i 's/$GOOGLE_PROJECT_ID/'"$GOOGLE_PROJECT_ID"'/g' deployment.yaml
            sed -i 's/$COMPUTE_ZONE/'"$COMPUTE_ZONE"'/g' deployment.yaml
            sed -i 's/$GOOGLE_COMPUTE_INSTANCE/'"$GOOGLE_COMPUTE_INSTANCE"'/g' deployment.yaml
            sed -i 's/$TAG/'"$CIRCLE_SHA1"'/g' deployment.yaml
      - run:
          name: Deploy Dev server
          command: |
            gcloud container clusters get-credentials nekoyume-test
            kubectl apply -f deployment.yaml

workflows:
  version: 2
  build-n-deploy:
    jobs:
      - build:
          filters:  # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /.+/
            branches:
              ignore: /.*/
      - dev-deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - /dev.*/
